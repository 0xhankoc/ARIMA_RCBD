value.name = "Entropy")
library(reshape2)
index_data_long <- melt(index_data,
variable.name = "Markets",
value.name = "Entropy")
model = aov(Entropy ~ Markets, index_data)
index_data_long <- melt(index_data,
variable.name = "Markets",
value.name = "Entropy")
knitr::opts_chunk$set(echo = TRUE)
cereal_data                                    # print data
---
title: "INDE316_W2_RCodes"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## Useful tricks
Use hashtag # to comment on lines in the code chunks.
print("codes") # Generate an output of "codes"
print("codes") # Generate an output of "codes"
print("codes") # Generate an output of "codes"
```
Use question mark ? or help() to call out the help documentation for a function.
Press [Ctrl] + [Enter] on Windows or [Command] + [Enter] on Mac to run codes on selected lines.
Press [Up] or [Down] buttons in console to browse codes previously run in the console.
## Data objects
```{r}
vec2 = c(1:5)
vec2
vec3 = c('Level 1 ', "Level 1 ", "Level 2 ", "Level 2 ", "Level 2 ")     # Character type
vec3
class(vec3)
vec4 = as.factor(vec3)                                                   # Factor type
vec4
levels(vec4)   # print the levels in the Factor data
vec4 = as.factor(vec3)                                                   # Factor type
vec4
levels(vec4)   # print the levels in the Factor data
```{r}
# Matrix
matrix1 = matrix(1:12, nrow = 3, ncol = 4)      # nrow defines the number of rows, ncol defines the number of columns
matrix1
matrix2 = cbind(vec1, vec2)                     # concatenate vectors by columns
matrix2
matrix3 = rbind(vec1, vec2)                     # concatenate vectors by rows
matrix3
matrix3 = rbind(vec1, vec2)                     # concatenate vectors by rows
```{r}
# Data frame
df1 = data.frame(vec1, vec2)                    # Generate data frame from vectors
vec4 = as.factor(vec3)                                                   # Factor type
vec4
levels(vec4)   # print the levels in the Factor data
```
```{r}
# Matrix
matrix1 = matrix(1:12, nrow = 3, ncol = 4)      # nrow defines the number of rows, ncol defines the number of columns
matrix1
matrix2 = cbind(vec1, vec2)                     # concatenate vectors by columns
matrix2
matrix3 = rbind(vec1, vec2)                     # concatenate vectors by rows
matrix3
matrix3 = rbind(vec1, vec2)                     # concatenate vectors by rows
# Vectors
vec1 <- c(1,2,3,4,5)                                                     # Numerical type
vec1           # print the vector
class(vec1)    # check the variable type
vec1[1]        # print the 1st value in the vector
vec1[1:3]      # print the 1st to 3rd values in the vector
vec2 = c(1:5)
vec2
vec3 = c('Level 1 ', "Level 1 ", "Level 2 ", "Level 2 ", "Level 2 ")     # Character type
vec3
class(vec3)
vec4 = as.factor(vec3)                                                   # Factor type
vec4
levels(vec4)   # print the levels in the Factor data
vec4 = as.factor(vec3)                                                   # Factor type
vec4
levels(vec4)   # print the levels in the Factor data
```{r}
# Matrix
matrix1 = matrix(1:12, nrow = 3, ncol = 4)      # nrow defines the number of rows, ncol defines the number of columns
matrix1
matrix2 = cbind(vec1, vec2)                     # concatenate vectors by columns
matrix2
matrix3 = rbind(vec1, vec2)                     # concatenate vectors by rows
matrix3
matrix3 = rbind(vec1, vec2)                     # concatenate vectors by rows
matrix3
```{r}
# Data frame
df1 = data.frame(vec1, vec2)                    # Generate data frame from vectors
df2 = data.frame(matrix2)                       # Generate data frame from matrix
df1
df2
df1
df2
## Cereal example
Generate a data frame of the Cereal problem with the following data:
Post:       7, 8, 15, 11, 9, 10
Kelloggs:   12, 17, 13, 18, 19, 15
Wheaties:   14, 18, 19, 17, 16, 18
GM:         19, 25, 22, 23, 18, 20
```{r}
## Viewing data
```{r}
```{r}
# view the data at row 2, col 4
cereal_data[2,4]                               # through index
cereal_data                                    # print data
## Convert WIDE data into LONG data
```{r}
```{r}
cereal_data_long = melt(cereal_data,
variable.name = "Brand",                   # name for column containing variable data
value.name = "Count")                      # name for column containing observation data
index_data_long <- melt(index_data,
variable.name = "Markets",
value.name = "Entropy")
View(index_data_long)
model = aov(Entropy ~ Markets, index_data_long)
summary(model)
plot(model)
index_data = data.frame(SP, NASDAQ, DJI, DJU)
index_data
summary(index_data)
index_data_long <- melt(index_data,
variable.name = "Markets",
value.name = "Entropy")
index_data_long <- melt(index_data,
id.vars = "Markets",
value.name = "Entropy")
index_data_long <- melt(index_data, id.vars="a",
variable.name = "Markets",
value.name = "Entropy")
index_data_long <- melt(index_data, id.vars="Markets",
variable.name = "Markets",
value.name = "Entropy")
index_data = data.frame(SP, NASDAQ, DJI, DJU)
index_data
index_data$Indexes <- rownames(index_data)
index_data$Indexes
index_data$Indexes <- colnames(index_data)
# ENTROPY ANOVA
SP = c(0.1894982, 0.1691065, 0.1922755, 0.1768667)
NASDAQ = c(0.1660017, 0.0903554, 0.2571081, 0.1473812)
DJI = c(0.1473812, 0.09647629, 0.1846223, 0.1238847)
DJU = c(0.1562498, 0.06698067, 0.2538234, 0.1190087)
index_data = data.frame(SP, NASDAQ, DJI, DJU)
index_data
index_data$Indexes <- rownames(index_data)
index_data$Indexes
summary(index_data)
index_data_long <- melt(index_data,
id.vars="Indexes"
variable.name = "Markets",
index_data_long <- melt(index_data,
id.vars="Indexes",
variable.name = "Markets",
value.name = "Entropy")
model = aov(Entropy ~ Markets, index_data_long)
summary(model)
plot(model)
index_data = data.frame(SP, NASDAQ, DJI, DJU)
index_data
index_data$Indexes <- rownames(index_data)
index_data$Indexes
index_data$Indexes <- colnames(index_data)
index_data$Markets <- colnames(index_data)
colnames(index_data)
index_data = data.frame(SP, NASDAQ, DJI, DJU)
# ENTROPY ANOVA
SP = c(0.1894982, 0.1691065, 0.1922755, 0.1768667)
NASDAQ = c(0.1660017, 0.0903554, 0.2571081, 0.1473812)
DJI = c(0.1473812, 0.09647629, 0.1846223, 0.1238847)
DJU = c(0.1562498, 0.06698067, 0.2538234, 0.1190087)
index_data = data.frame(SP, NASDAQ, DJI, DJU)
index_data
colnames(index_data)
index_data$Markets <- colnames(index_data)
index_data$Markets
summary(index_data)
index_data_long <- melt(index_data,
id.vars="Markets",
variable.name = "Markets",
value.name = "Entropy")
index_data_long
colnames(index_data)
colnames(index_data)
index_data$id <- c(,1:16)
colnames(index_data)
index_data$id <- c(1:16)
index_data = data.frame(SP, NASDAQ, DJI, DJU)
# ENTROPY ANOVA
SP = c(0.1894982, 0.1691065, 0.1922755, 0.1768667)
NASDAQ = c(0.1660017, 0.0903554, 0.2571081, 0.1473812)
DJI = c(0.1473812, 0.09647629, 0.1846223, 0.1238847)
DJU = c(0.1562498, 0.06698067, 0.2538234, 0.1190087)
index_data = data.frame(SP, NASDAQ, DJI, DJU)
index_data
colnames(index_data)
index_data$id
colnames(index_data)
index_data$id <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
colnames(index_data)
index_data = data.frame(SP, NASDAQ, DJI, DJU)
index_data
index_data_long <- melt(index_data,
id.vars="id",
variable.name = "Markets",
value.name = "Entropy")
index_data_long <- melt(index_data,
variable.name = "Markets",
value.name = "Entropy")
model = aov(Entropy ~ Markets, index_data_long)
summary(model)
plot(model)
index_data$Markets
summary(index_data)
index_data_long <- melt(index_data,
variable.name = "Markets",
value.name = "Entropy")
model = aov(Entropy ~ Markets, index_data_long)
summary(model)
plot(model)
autoplot(dju_obs3_diff)
autoplot(dju_obs3)
dju_obs3 <- window(DJU_ts, c(2015), c(2020, 1))
DJU_ts <- ts(DJU$DJUA, start=c(2013,1), end=c(2022, 3), frequency=12)
dju_obs1 <- window(DJU_ts, c(2014), c(2019, 1))
dju_obs2 <- window(DJU_ts, c(2012), c(2017, 1))
dju_obs3 <- window(DJU_ts, c(2015), c(2020, 1))
dju_obs4 <- window(DJU_ts, c(2013), c(2018, 1))
# Step 2: Check for stationarity
autoplot(dju_obs1)
autoplot(dju_obs2)
autoplot(dju_obs3)
################################################################################
# independent variable 4: DOWJ Utility average, monthly data                   #
#______________________________________________________________________________#
# https://fred.stlouisfed.org/series/DJUA#0
DJU= read.csv("DJUA.csv")
DJU_ts <- ts(DJU$DJUA, start=c(2013,1), end=c(2022, 3), frequency=12)
dju_obs1 <- window(DJU_ts, c(2014), c(2019, 1))
dju_obs2 <- window(DJU_ts, c(2012), c(2017, 1))
dju_obs3 <- window(DJU_ts, c(2015), c(2020, 1))
dju_obs4 <- window(DJU_ts, c(2013), c(2018, 1))
# Step 2: Check for stationarity
autoplot(dju_obs1)
autoplot(dju_obs2)
autoplot(dju_obs3)
autoplot(dju_obs4)
dju_obs1_diff <- diff(log(dju_obs1))
dju_obs2_diff <- diff(log(dju_obs2))
dju_obs3_diff <- diff(log(dju_obs3))
dju_obs4_diff <- diff(log(dju_obs4))
autoplot(dju_obs1_diff)
autoplot(dju_obs2_diff)
autoplot(dju_obs3_diff)
# ENTROPY ANOVA
SP = c(0.1894982, 0.1691065, 0.1922755, 0.1768667)
NASDAQ = c(0.1660017, 0.0903554, 0.2571081, 0.1473812)
DJI = c(0.1473812, 0.09647629, 0.1846223, 0.1238847)
DJU = c(0.1562498, 0.06698067, 0.2538234, 0.1190087)
index_data = data.frame(SP, NASDAQ, DJI, DJU)
index_data
colnames(index_data)
index_data$id <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
colnames(index_data)
index_data$id <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
index_data$id
index_data$Markets
summary(index_data)
index_data_long <- melt(index_data,
variable.name = "Markets",
value.name = "Entropy")
model = aov(Entropy ~ Markets, index_data_long)
summary(model)
plot(model)
library(tseries)
library(TSEntropies)
library(reshape2)
setwd("/Users/orhankoc/Documents/ARIMA_RCBD/scipts")
RW <- arima.sim(model= list(order = c(0, 0, 0)), n=60)
plot.ts(RW,main="White Noise", col=4)
autoplot(diff(sp_obs2)) + labs( y="Price", title="Differentiated SP500 Price v Time")
################################################################################
#                                   ARIMA                                      #
################################################################################
# independent variable 1: SP500, monthly data                                  #
#______________________________________________________________________________#
# https://fred.stlouisfed.org/series/SP500#0
SP = read.csv("SP500.csv")
SP_ts <- ts(SP$DJIA, start=c(2013, 1), end=c(2022, 3), frequency=12)
# minimum sample is n=50 recommended for ARIMA
sp_obs1 <- window(SP_ts, c(2014), c(2019, 1))
sp_obs2 <- window(SP_ts, c(2012), c(2017, 1))
sp_obs3 <- window(SP_ts, c(2015), c(2020, 1))
sp_obs4 <- window(SP_ts, c(2013), c(2018, 1))
# Step 2: Check for stationarity
autoplot(sp_obs1)
autoplot(sp_obs2)
autoplot(sp_obs3)
autoplot(sp_obs4)
sp_obs1_diff <- diff(log(sp_obs1))
sp_obs2_diff <- diff(log(sp_obs2))
sp_obs3_diff <- diff(log(sp_obs3))
sp_obs4_diff <- diff(log(sp_obs4))
autoplot(sp_obs1_diff)
autoplot(sp_obs2_diff)
autoplot(sp_obs3_diff)
autoplot(sp_obs4_diff)
sp_obs3_diff <- diff(log(sp_obs3))
autoplot(sp_obs3)
################################################################################
# independent variable 2: NASDAQ, monthly data                                 #
#______________________________________________________________________________#
# https://fred.stlouisfed.org/series/NASDAQ100#0
NASDAQ = read.csv("NASDAQ100.csv")
nasdaq_ts <- ts(NASDAQ$NASDAQ100, start=c(2013,1), end=c(2022, 3), frequency=12)
nasdaq_obs1 <- window(nasdaq_ts, c(2014), c(2019, 1))
nasdaq_obs2 <- window(nasdaq_ts, c(2012), c(2017, 1))
nasdaq_obs3 <- window(nasdaq_ts, c(2015), c(2020, 1))
nasdaq_obs4 <- window(nasdaq_ts, c(2013), c(2018, 1))
# Step 2: Check for stationarity
autoplot(nasdaq_obs1)
autoplot(nasdaq_obs2)
autoplot(nasdaq_obs3)
autoplot(sp_obs2)
autoplot(sp_obs3)
autoplot(sp_obs4)
sp_obs1_diff <- diff(log(sp_obs1))
sp_obs2_diff <- diff(log(sp_obs2))
sp_obs3_diff <- diff(log(sp_obs3))
sp_obs4_diff <- diff(log(sp_obs4))
autoplot(sp_obs1_diff)
autoplot(sp_obs2_diff)
autoplot(sp_obs3_diff)
autoplot(nasdaq_obs3_diff)
nasdaq_ts <- ts(NASDAQ$NASDAQ100, start=c(2013,1), end=c(2022, 3), frequency=12)
nasdaq_obs1 <- window(nasdaq_ts, c(2014), c(2019, 1))
nasdaq_obs2 <- window(nasdaq_ts, c(2012), c(2017, 1))
nasdaq_obs3 <- window(nasdaq_ts, c(2015), c(2020, 1))
nasdaq_obs4 <- window(nasdaq_ts, c(2013), c(2018, 1))
# Step 2: Check for stationarity
autoplot(nasdaq_obs1)
autoplot(nasdaq_obs2)
autoplot(nasdaq_obs3)
autoplot(nasdaq_obs4)
nasdaq_obs1_diff <- diff(log(nasdaq_obs1))
nasdaq_obs2_diff <- diff(log(nasdaq_obs2))
nasdaq_obs3_diff <- diff(log(nasdaq_obs3))
nasdaq_obs4_diff <- diff(log(nasdaq_obs4))
autoplot(nasdaq_obs1_diff)
autoplot(nasdaq_obs2_diff)
autoplot(nasdaq_obs3_diff)
library(forecast)
library(ggplot2)
library(tseries)
library(TSEntropies)
library(reshape2)
setwd("/Users/orhankoc/Documents/ARIMA_RCBD/scipts")
RW <- arima.sim(model= list(order = c(0, 0, 0)), n=60)
plot.ts(RW,main="White Noise", col=4)
autoplot(diff(sp_obs2)) + labs( y="Price", title="Differentiated SP500 Price v Time")
################################################################################
#                                   ARIMA                                      #
################################################################################
# independent variable 1: SP500, monthly data                                  #
#______________________________________________________________________________#
# https://fred.stlouisfed.org/series/SP500#0
SP = read.csv("SP500.csv")
SP_ts <- ts(SP$DJIA, start=c(2013, 1), end=c(2022, 3), frequency=12)
# minimum sample is n=50 recommended for ARIMA
sp_obs1 <- window(SP_ts, c(2014), c(2019, 1))
sp_obs2 <- window(SP_ts, c(2012), c(2017, 1))
sp_obs3 <- window(SP_ts, c(2015), c(2020, 1))
sp_obs4 <- window(SP_ts, c(2013), c(2018, 1))
# Step 2: Check for stationarity
autoplot(sp_obs1)
autoplot(sp_obs2)
autoplot(sp_obs3)
autoplot(sp_obs4)
sp_obs1_diff <- diff(log(sp_obs1))
sp_obs2_diff <- diff(log(sp_obs2))
sp_obs3_diff <- diff(log(sp_obs3))
sp_obs4_diff <- diff(log(sp_obs4))
autoplot(sp_obs1_diff)
autoplot(sp_obs2_diff)
autoplot(sp_obs3_diff)
autoplot(sp_obs4_diff)
# check if difference of log data is stationary for SP500 using Dick Fulley test
#H0: The time series is non-stationary.
#HA: The time series is stationary.
adf.test(sp_obs1_diff) # is stationary
adf.test(sp_obs2_diff) # is NOT stationary
adf.test(sp_obs3_diff) # is NOT stationary
adf.test(sp_obs4_diff) # is stationary
# APPROXIMATE ENTROPY:
ApEn(RW, r = 0.1*sd(RW))
ApEn(sp_obs1_diff, r = 0.1*sd(sp_obs1_diff)) # 0.1894982
ApEn(sp_obs2_diff, r = 0.1*sd(sp_obs2_diff)) # 0.1691065
ApEn(sp_obs3_diff, r = 0.1*sd(sp_obs3_diff)) # 0.1922755
ApEn(sp_obs4_diff, r = 0.1*sd(sp_obs4_diff)) # 0.1768667
################################################################################
# independent variable 2: NASDAQ, monthly data                                 #
#______________________________________________________________________________#
# https://fred.stlouisfed.org/series/NASDAQ100#0
NASDAQ = read.csv("NASDAQ100.csv")
nasdaq_ts <- ts(NASDAQ$NASDAQ100, start=c(2013,1), end=c(2022, 3), frequency=12)
nasdaq_obs1 <- window(nasdaq_ts, c(2014), c(2019, 1))
nasdaq_obs2 <- window(nasdaq_ts, c(2012), c(2017, 1))
nasdaq_obs3 <- window(nasdaq_ts, c(2015), c(2020, 1))
nasdaq_obs4 <- window(nasdaq_ts, c(2013), c(2018, 1))
# Step 2: Check for stationarity
autoplot(nasdaq_obs1)
autoplot(nasdaq_obs2)
autoplot(nasdaq_obs3)
autoplot(nasdaq_obs4)
nasdaq_obs1_diff <- diff(log(nasdaq_obs1))
nasdaq_obs2_diff <- diff(log(nasdaq_obs2))
nasdaq_obs3_diff <- diff(log(nasdaq_obs3))
nasdaq_obs4_diff <- diff(log(nasdaq_obs4))
autoplot(nasdaq_obs1_diff)
autoplot(nasdaq_obs2_diff)
autoplot(nasdaq_obs3_diff)
autoplot(nasdaq_obs4_diff)
# check if difference of log data is stationary for SP500 using Dick Fulley test
#H0: The time series is non-stationary.
#HA: The time series is stationary.
adf.test(nasdaq_obs1_diff) # is stationary
adf.test(nasdaq_obs2_diff) # is NOT stationary
adf.test(nasdaq_obs3_diff) # is stationary
adf.test(nasdaq_obs4_diff) # is stationary
ApEn(nasdaq_obs1_diff, r = 0.1*sd(nasdaq_obs1_diff)) # 0.1660017
ApEn(nasdaq_obs2_diff, r = 0.1*sd(nasdaq_obs2_diff)) # 0.0903554
ApEn(nasdaq_obs3_diff, r = 0.1*sd(nasdaq_obs3_diff)) # 0.2571081
ApEn(nasdaq_obs4_diff, r = 0.1*sd(nasdaq_obs4_diff)) # 0.1473812
################################################################################
# independent variable 3: DOWJ Transportation average, monthly data            #
#______________________________________________________________________________#
# https://fred.stlouisfed.org/series/DJTA#0
DJT = read.csv("DJTA.csv")
DJT_ts <- ts(DJT$DJTA, start=c(2013,1), end=c(2022, 3), frequency=12)
djt_obs1 <- window(DJT_ts, c(2014), c(2019, 1))
djt_obs2 <- window(DJT_ts, c(2012), c(2017, 1))
djt_obs3 <- window(DJT_ts, c(2015), c(2020, 1))
djt_obs4 <- window(DJT_ts, c(2013), c(2018, 1))
# Step 2: Check for stationarity
autoplot(djt_obs1)
autoplot(djt_obs2)
autoplot(djt_obs3)
# ENTROPY ANOVA
SP = c(0.1894982, 0.1691065, 0.1922755, 0.1768667)
NASDAQ = c(0.1660017, 0.0903554, 0.2571081, 0.1473812)
DJI = c(0.1473812, 0.09647629, 0.1846223, 0.1238847)
DJU = c(0.1562498, 0.06698067, 0.2538234, 0.1190087)
index_data = data.frame(SP, NASDAQ, DJI, DJU)
index_data
index_data$Markets
summary(index_data)
index_data_long <- melt(index_data,
variable.name = "Markets",
value.name = "Entropy")
library(forecast)
library(ggplot2)
library(tseries)
library(TSEntropies)
library(reshape2)
setwd("/Users/orhankoc/Documents/ARIMA_RCBD/scipts")
# ENTROPY ANOVA
SP = c(0.1894982, 0.1691065, 0.1922755, 0.1768667)
NASDAQ = c(0.1660017, 0.0903554, 0.2571081, 0.1473812)
DJI = c(0.1473812, 0.09647629, 0.1846223, 0.1238847)
DJU = c(0.1562498, 0.06698067, 0.2538234, 0.1190087)
index_data = data.frame(SP, NASDAQ, DJI, DJU)
index_data
colnames(index_data)
index_data$id <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
index_data$id
index_data$Markets
summary(index_data)
index_data_long <- melt(index_data,
variable.name = "Markets",
value.name = "Entropy")
model = aov(Entropy ~ Markets, index_data_long)
index_data_long
# ENTROPY ANOVA
blocks = c(1,2,3,4)
SP = c(0.1894982, 0.1691065, 0.1922755, 0.1768667)
NASDAQ = c(0.1660017, 0.0903554, 0.2571081, 0.1473812)
DJI = c(0.1473812, 0.09647629, 0.1846223, 0.1238847)
DJU = c(0.1562498, 0.06698067, 0.2538234, 0.1190087)
index_data = data.frame(blocks, SP, NASDAQ, DJI, DJU)
index_data
summary(index_data)
index_data_long <- melt(index_data,
variable.name = "Markets",
value.name = "Entropy")
index_data_long
model = aov(Entropy ~ Markets, index_data_long)
summary(model)
index_data_long <- melt(index_data,
id = "blocks",
variable.name = "Markets",
value.name = "Entropy")
index_data_long
model = aov(Entropy ~ Markets, index_data_long)
summary(model)
index_data_long
model = aov(Entropy ~ Blocks, Markets, index_data_long)
